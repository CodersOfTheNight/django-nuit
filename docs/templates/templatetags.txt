Templates Tags and Filters
==========================

Nuit provides a handlful of template tags and filters designed to abstract some of the complexities of writing templates for the framework.

Tags
~~~~

.. _template-tag-extend:

``extend``
----------

Extends another template, passing any keyword arguments to the parent template (prefixed by ``nuit_``). For example::

{% extend 'nuit/base.html' topbar=True %}

results in the variable ``nuit_topbar`` being available (and set to ``True``) in ``nuit/base.html``.

.. _template-tag-menu-section:

``menu_section``
----------------

Intended for use inside one of either the :ref:`template-nuit-base-block-left-menu` or :ref:`template-nuit-base-block-right-menu` blocks. This block wraps any content in the markup required to render a section of the menu correctly.

The following arguments are optional:

.. attribute:: title

    :default: None

    The title of this section. If ommitted, no title will be displayed.

.. attribute:: link_name

    :default: None

    When used in the :ref:`template-nuit-base-block-right-menu` block, these sections appear under the gear at medium screens and smaller. This attribute defines the name of the link to be displayed in that menu which will activate the popup. This is required if :attr:`title` is not set. If ommitted, and :attr:`title` is set, then the title will be used.

.. attribute:: id

    :default: None

    A unique ID to use for the section. If ommitted, then the result of the :attr:`link_name` attribute calculation will be run through Django's slugify_ function, and that result used.

    .. _slugify: https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.text.slugify

.. attribute:: is_list

    :default: False

    Whether this section contains a list of links or not. If ``True``, then the correct HTML will be wrapped around the content to display the list in the right way. This is intended to be used with the :ref:`template-tag-menu-item` template tag.

Example usage::

    {% block right_menu %}

        {% menu_section "Details" link_name="Show some details" %}
            <p>These are some details.</p>
        {% end_menu_section %}

        {% menu_section "More stuff" %}
            <table>
                <tr>
                    <td>A table</td>
                </tr>
            </table>
        {% end_menu_section %}

    {% endblock %}

.. _template-tag-menu-item:

``menu_item``
-------------

Renders the HTML for a menu item. Intended for use between :ref:`template-tag-menu-section` tags with ``is_list`` set to ``True``. Takes the following arguments:

.. attribute:: link

    The URL for the menu item. If you wish to use a reversed view, then you should use Django's URL tag::

        {% url 'name.of.my.view' as my_url %}
        {% menu_item link=my_url name="My URL" %}

.. attribute:: name

    The display name of the link.

.. attribute:: id

    :default: slugified :attr:`name`

    A unique ID for the link, intended for use by the :ref:`template-tag-set-active-menu` tag. Is applied as a class to the ``<li>`` prepended with ``menu-``.

.. _template-tag-app-menu:

``app_menu``
------------

Renders the main application menu. Intended for use in the :ref:`template-nuit-base-block-right-menu` block, and should be filled with :ref:`template-tag-menu-item` links. One optional argument:

.. attribute:: title

        The title of the application - displayed above the menu items.

Example usage::

    {% block left_menu %}
        {% app_menu 'My Application' %}
            {% menu_item name='Page One' link='/page-one/' %}
            {% menu_item name='Page Two' link='/page-two/' %}
            {% menu_item name='Page Three' link='/page-three/' %}
            {% menu_item name='Page Four' link='/page-four/' %}
            {% menu_item name='Page Five' link='/page-five/' %}
        {% end_app_menu %}
    {% endblock %}

.. _template-tag-set-active-menu:

``set_active_menu``
-------------------

Renders an invisible element used by Javascript to set the ``active`` class on a menu item for this page. This must be within a template block that renders to the screen - it doesn't matter which one. It produces no visible output. The only required attribute is:

.. attribute:: active_menu

    The unique ID of the menu item to be activated. To highlight the menu item in the example above, the required code would be::

        {% set_active_menu "my-url" %}

.. _template-tag-pagination-menu:

``pagination_menu``
-------------------

Used internally by Nuit in the :ref:`template-generic-list` template to generate the pagination links for a paginated list of objects. The required attributes are:

.. attribute:: page_obj

    The Django Page_ object for the current view of data. This is provided by Django's ListView_ and Nuit's SearchableListView.

    .. _Page: https://docs.djangoproject.com/en/dev/topics/pagination/#page-objects
    .. _ListView: https://docs.djangoproject.com/en/dev/ref/class-based-views/generic-display/#listview

.. attribute:: show_totals

    :default: True

    Whether to show the total number of objects or not.

.. _template-tag-foundation-form:

``foundation_form``
-------------------

Renders a form using Foundation's form styles in the given layout. Takes one required arguement, and one optional:

.. attribute:: form

    The Django Form object. Works with all standard Django Form classes.

.. attribute:: csrf_enabled

    :default: ``True``

    Whether to include the CSRF token or not.

.. attribute:: collapse_container

    :default: ``False``

    Whether to collapse the side padding of the form elements.

Further options are specified between the :ref:`template-tag-foundation-form` and ``end_foundation_form`` tags. For more details, see the :doc:`forms` documentation. Example usage::

    {% foundation_form my_form_object %}
        title, first_name, surname
        email_address
    {% end_foundation_form %}

Filters
~~~~~~~

.. _template-filter-message-class:

``message_class``
-----------------

Given a message object from Django's :mod:`django.contrib.messages`, returns a string containing the CSS alert-box class for Foundation `alert boxes`_ corresponding to the message's level (``DEBUG``, ``INFO``, ``SUCCESS``, ``WARNING`` or ``ERROR``). Used to style the message alert boxes::

    {% for message in messages %}
        <div data-alert class='alert-box {{message|message_class}}'>{{message}}</div>
    {% endfor %}

.. _`alert boxes`: http://foundation.zurb.com/docs/components/alert_boxes.html
