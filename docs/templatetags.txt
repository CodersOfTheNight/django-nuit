Templates Tags
==============

Nuit provides a handlful of template tags designed to abstract some of the complexities of writing templates for the framework.

To use the tags, you need to load the ``nuit`` tag library::

    {% load nuit %}

.. attribute:: extend

    Extends another template, passing any keyword arguments to the parent template (prefixed by ``nuit_``). For example::

    {% extend 'nuit/base.html' topbar=True %}

    results in the variable ``nuit_topbar`` being available (and set to ``True``) in ``nuit/base.html``.

.. _menu-section:

.. attribute:: menu_section

    Intended for use inside one of either the :attr:`left_menu` or :attr:`right_menu` blocks. This block wraps any content in the markup required to render a section of the menu correctly.

    The following arguments are optional:

    .. attribute:: title

        :default: None

        The title of this section. If ommitted, no title will be displayed.

    .. attribute:: link_name

        :default: None

        When used in the :attr:`right_menu`, these sections appear under the gear at medium screens and smaller. This attribute defines the name of the link to be displayed in that menu which will activate the popup. This is required if :attr:`title` is not set. If ommitted, and :attr:`title` is set, then the title will be used.

    .. attribute:: id

        :default: None

        A unique ID to use for the section. If ommitted, then the result of the :attr:`link_name` attribute calculation will be run through Django's slugify_ function, and that result used.

        .. _slugify: https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.text.slugify

    .. attribute:: is_list

        :default: False

        Whether this section contains a list of links or not. If ``True``, then the correct HTML will be wrapped around the content to display the list in the right way. This is intended to be used with the :ref:`menu_item <menu-item>` template tag.

    Example usage::

        {% block right_menu %}

            {% menu_section "Details" link_name="Show some details" %}
                <p>These are some details.</p>
            {% end_menu_section %}

            {% menu_section "More stuff" %}
                <table>
                    <tr>
                        <td>A table</td>
                    </tr>
                </table>
            {% end_menu_section %}

        {% endblock %}

.. _menu-item:

.. attribute:: menu_item

    Renders the HTML for a menu item. Intended for use between :ref:`menu_section <menu-section>` tags with ``is_list`` set to ``True``. Takes the following arguments:

        .. attribute:: link

        The URL for the menu item. If you wish to use a reversed view, then you should use Django's URL tag::

            {% url 'name.of.my.view' as my_url %}
            {% menu_item link=my_url name="My URL" %}

        .. attribute:: name

        The display name of the link.

        .. attribute:: id

            :default: slugified :attr:`name`

            A unique ID for the link, intended for use by the :ref:`set_active_menu <set-active-menu>` tag. Is applied as a class to the ``<li>`` prepended with ``menu-``.

.. _set-active-menu:

.. attribute:: set_active_menu

    Renders an invisible element used by Javascript to set the ``active`` class on a menu item for this page. This must be within a template block that renders to the screen - it doesn't matter which one. It produces no visible output. The only required attribute is:

        .. attribute:: active_menu

            The unique ID of the menu item to be activated. To highlight the menu item in the example above, the required code would be::

                {% set_active_menu "my-url" %}

.. attribute:: pagination_menu

    Used internally by Nuit in the :ref:`list-template` template to generate the pagination links for a paginated list of objects. The required attributes are:

        .. attribute:: page_obj

            The Django Page_ object for the current view of data. This is provided by Django's ListView_ and Nuit's SearchableListView.

        .. attribute:: show_totals

            :default: True

            Whether to show the total number of objects or not.
